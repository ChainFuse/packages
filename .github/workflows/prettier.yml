name: Prettier

on:
  push:
    paths:
      - '**.*js*'
      - '**.*ts*'
      - '**.css'
      - '**.less'
      - '**.scss'
      - '**.html'
      - '**.hbs'
      - '**.json'
      - '**.gql'
      - '**.graphql'
      - '**.md*'
      - '**.yaml'
      - '**.yml'
  pull_request_target:
    paths:
      - '**.*js*'
      - '**.*ts*'
      - '**.css'
      - '**.less'
      - '**.scss'
      - '**.html'
      - '**.hbs'
      - '**.json'
      - '**.gql'
      - '**.graphql'
      - '**.md*'
      - '**.yaml'
      - '**.yml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prettier:
    runs-on: ubuntu-latest
    if: github.actor != 'sushidata-prettier[bot]'
    permissions:
      contents: write
    steps:
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
          disable-sudo-and-containers: true
      - uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: gh_prettier_token
        with:
          app-id: ${{ vars.GH_PRETTIER_CLIENT_ID }}
          private-key: ${{ secrets.GH_PRETTIER_PRIVATE_KEY }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.gh_prettier_token.outputs.token }}
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
      - run: npm install -D prettier @demosjarco/prettier-config
      - run: npm run fmt:fix
      - name: Check for Changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
      - run: git add --all
        if: steps.changes.outputs.changes == 'true'
      - name: Don't touch package files
        if: steps.changes.outputs.changes == 'true'
        run: git reset -- package*.json
      - name: Commit and Push Changes
        if: steps.changes.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ steps.gh_prettier_token.outputs.token }}
        run: |
          # Get the current branch and repository info
          BRANCH_NAME="${{ github.ref_name }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          # Get current commit SHA
          CURRENT_SHA=$(git rev-parse HEAD)
          
          # Get all staged files and create blob objects
          declare -a TREE_ENTRIES
          for file in $(git diff-index --cached --name-only HEAD); do
            if [ -f "$file" ]; then
              # Create blob for the file
              BLOB_SHA=$(gh api "repos/$REPO_OWNER/$REPO_NAME/git/blobs" \
                --method POST \
                --field content="$(base64 -w 0 "$file")" \
                --field encoding="base64" \
                --jq '.sha')
              
              # Add to tree entries
              TREE_ENTRIES+=("{\"path\":\"$file\",\"mode\":\"100644\",\"type\":\"blob\",\"sha\":\"$BLOB_SHA\"}")
            fi
          done
          
          # Create tree
          TREE_JSON="[$(IFS=,; echo "${TREE_ENTRIES[*]}")]"
          TREE_SHA=$(gh api "repos/$REPO_OWNER/$REPO_NAME/git/trees" \
            --method POST \
            --field base_tree="$CURRENT_SHA" \
            --raw-field tree="$TREE_JSON" \
            --jq '.sha')
          
          # Create commit
          COMMIT_SHA=$(gh api "repos/$REPO_OWNER/$REPO_NAME/git/commits" \
            --method POST \
            --field message="Ran formatter" \
            --field tree="$TREE_SHA" \
            --raw-field parents="[\"$CURRENT_SHA\"]" \
            --field author.name="${{ steps.gh_prettier_token.outputs.app-slug }}[bot]" \
            --field author.email="${{ vars.GH_PRETTIER_USER_ID }}+${{ steps.gh_prettier_token.outputs.app-slug }}[bot]@users.noreply.github.com" \
            --field committer.name="${{ steps.gh_prettier_token.outputs.app-slug }}[bot]" \
            --field committer.email="${{ vars.GH_PRETTIER_USER_ID }}+${{ steps.gh_prettier_token.outputs.app-slug }}[bot]@users.noreply.github.com" \
            --jq '.sha')
          
          # Update branch reference
          gh api "repos/$REPO_OWNER/$REPO_NAME/git/refs/heads/$BRANCH_NAME" \
            --method PATCH \
            --field sha="$COMMIT_SHA"
