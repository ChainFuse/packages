name: SuperAi Catalog

on:
  push:
    paths:
      - '.github/workflows/ai-catalog.yml'
      - 'packages/types/src/super-ai/workers-ai-catalog.ts'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  regenerate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          disable-sudo: true
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await Promise.all([
                fetch(new URL(`client/v4/accounts/${process.env.CF_ACCOUNT_ID}/ai/models/search`, 'https://api.cloudflare.com'), {
                    headers: {
                        Authorization: `Bearer ${process.env.WORKERS_AI_API_KEY}`,
                    },
                }),
                fetch(new URL(`client/v4/accounts/${process.env.CF_ACCOUNT_ID}/ai/finetunes`, 'https://api.cloudflare.com'), {
                    headers: {
                        Authorization: `Bearer ${process.env.WORKERS_AI_API_KEY}`,
                    },
                }),
                fetch(new URL(`client/v4/accounts/${process.env.CF_ACCOUNT_ID}/ai/finetunes/public`, 'https://api.cloudflare.com'), {
                    headers: {
                        Authorization: `Bearer ${process.env.WORKERS_AI_API_KEY}`,
                    },
                }),
            ])
                .then(([modelResponse, privateLoraResult, publicLoraResult]) => {
                    if (modelResponse.ok && privateLoraResult.ok && publicLoraResult.ok) {
                        return Promise.all([modelResponse.json(), privateLoraResult.json(), publicLoraResult.json()]);
                    } else {
                        throw new Error(modelResponse.statusText, { cause: modelResponse.status });
                    }
                })
                .then(async ([{ result: modelJson }, { result: privateLoraJson }, { result: publicLoraJson }]) => {
                    const grouped = {};

                    modelJson.forEach((model) => {
                        // Pull out model group into a upper level key
                        const taskName = model.task.name;
                        if (!grouped[taskName]) {
                            grouped[taskName] = {
                                id: model.task.id,
                                description: model.task.description,
                                models: [],
                            };
                        }

                        const { task, ...modelWithoutTask } = model;

                        // Convert stringified values to primitives, if possible
                        console.log('properties', model.properties);
                        const properties = model.properties.reduce((acc, prop) => {
                            let value = prop.value;
                            if (value === 'true' || value === 'false') {
                                value = Boolean(value);
                            } else if (!isNaN(value)) {
                                value = Number(value);
                            }
                            acc[prop.property_id] = value;
                            return acc;
                        }, {});

                        grouped[taskName].models.push({ ...modelWithoutTask, properties });
                    });
                    
                    const temp = [...privateLoraJson, ...publicLoraJson].reduce((acc, prop) => {
                        let value = prop.value;
                        if (value === 'true' || value === '1' || value === 'false' || value === '0') {
                            value = Boolean(value);
                        } else if (!isNaN(value)) {
                            value = Number(value);
                        }
                        acc[prop.property_id] = value;
                        return acc;
                    }, {});
                    console.log('temp', temp);

                    await import('node:fs').then(({ createWriteStream }) => {
                        const writeStream = createWriteStream('packages/types/src/super-ai/workers-ai-catalog.ts', { encoding: 'utf8' });
                        writeStream.write(
                            `export const workersAiCatalog = ${JSON.stringify(
                                {
                                    modelGroups: grouped,
                                    // loras: [...privateLoraJson, ...publicLoraJson].map((lora) => ({
                                    // 	// The api endpoint doesn't provide `public` on the private endpoint
                                    // 	public: false,
                                    // 	// Convert stringified values to primitives, if possible
                                    // 	...lora.reduce((acc, prop) => {
                                    // 		let value = prop.value;
                                    // 		if (value === 'true' || value === '1' || value === 'false' || value === '0') {
                                    // 			value = Boolean(value);
                                    // 		} else if (!isNaN(value)) {
                                    // 			value = Number(value);
                                    // 		}
                                    // 		acc[prop.property_id] = value;
                                    // 		return acc;
                                    // 	}, {}),
                                    // })),
                                },
                                null,
                                '\t',
                            )} as const`,
                        );
                        writeStream.end();
                    });
                });
        env:
          WORKERS_AI_API_KEY: ${{ secrets.WORKERS_AI_API_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install -D prettier @demosjarco/prettier-config
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PRIVATE_READ_NPM_TOKEN }}
      - run: npx prettier --write .
      - name: Git Setup
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - run: git add packages/types/src/super-ai/workers-ai-catalog.ts
      - run: git commit -m "Updated model catalog" || echo "model catalog not touched"
      - run: git push
