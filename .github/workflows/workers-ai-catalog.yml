name: Workers Ai Catalog

on:
  push:
    paths:
      - '.github/workflows/workers-ai-catalog.yml'
      - 'packages/types/src/ai-tools/workers-ai/catalog.ts'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  workersAi:
    runs-on: ubuntu-latest
    if: github.actor != 'sushidata-cloudflare[bot]'
    permissions:
      contents: write
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo-and-containers: true
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        id: gh_cloudflare_token
        with:
          app-id: ${{ vars.GH_CLOUDFLARE_CLIENT_ID }}
          private-key: ${{ secrets.GH_CLOUDFLARE_PRIVATE_KEY }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ steps.gh_cloudflare_token.outputs.token }}
      - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            await Promise.all([
                fetch(new URL(`client/v4/accounts/${process.env.CF_ACCOUNT_ID}/ai/models/search`, 'https://api.cloudflare.com'), {
                    headers: {
                        Authorization: `Bearer ${process.env.CICD_CF_API_TOKEN}`,
                    },
                }).then((modelResponse) => {
                    if (modelResponse.ok) {
                        return modelResponse.json();
                    } else {
                        throw new Error(modelResponse.statusText, { cause: modelResponse.status });
                    }
                }),
                fetch(new URL(`client/v4/accounts/${process.env.CF_ACCOUNT_ID}/ai/finetunes`, 'https://api.cloudflare.com'), {
                    headers: {
                        Authorization: `Bearer ${process.env.CICD_CF_API_TOKEN}`,
                    },
                }).then((privateLoraResult) => {
                    if (privateLoraResult.ok) {
                        return privateLoraResult.json();
                    } else {
                        throw new Error(privateLoraResult.statusText, { cause: privateLoraResult.status });
                    }
                }),
                fetch(new URL(`client/v4/accounts/${process.env.CF_ACCOUNT_ID}/ai/finetunes/public`, 'https://api.cloudflare.com'), {
                    headers: {
                        Authorization: `Bearer ${process.env.CICD_CF_API_TOKEN}`,
                    },
                }).then((publicLoraResult) => {
                    if (publicLoraResult.ok) {
                        return publicLoraResult.json();
                    } else {
                        throw new Error(publicLoraResult.statusText, { cause: publicLoraResult.status });
                    }
                }),
            ]).then(async ([{ result: modelJson }, { result: privateLoraJson }, { result: publicLoraJson }]) => {
                const grouped = {};

                modelJson.forEach((model) => {
                    // Pull out model group into a upper level key
                    const taskName = model.task.name;
                    if (!grouped[taskName]) {
                        grouped[taskName] = {
                            id: model.task.id,
                            description: model.task.description,
                            models: [],
                        };
                    }

                    const { task, ...modelWithoutTask } = model;

                    // Convert stringified values to primitives, if possible
                    const properties = model.properties.reduce((acc, prop) => {
                        let value = prop.value;
                        if (['true', 'false', '0', '1', 0, 1].includes(value)) {
                            value = Boolean(value);
                        } else if (!isNaN(value)) {
                            value = Number(value);
                        }
                        acc[prop.property_id] = value;
                        return acc;
                    }, {});

                    grouped[taskName].models.push({ ...modelWithoutTask, properties });
                });

                await import('node:fs').then(({ createWriteStream }) => {
                    const writeStream = createWriteStream('packages/types/src/ai-tools/workers-ai/catalog.ts', { encoding: 'utf8' });
                    writeStream.write(
                        `export const workersAiCatalog = ${JSON.stringify(
                            {
                                modelGroups: grouped,
                                loras: [...privateLoraJson, ...publicLoraJson].map((lora) => ({
                                    // The api endpoint doesn't provide `public` on the private endpoint
                                    public: false,
                                    // Convert stringified values to primitives, if possible
                                    ...Object.entries(lora).reduce((acc, prop) => {
                                        console.log('prop', prop);
                                        let value = prop[1];
                                        if (['true', 'false', '0', '1', 0, 1].includes(value)) {
                                            value = Boolean(value);
                                        } else if (!isNaN(value)) {
                                            value = Number(value);
                                        }
                                        acc[prop[0]] = value;
                                        return acc;
                                    }, {}),
                                })),
                            },
                            null,
                            '\t',
                        )} as const`,
                    );
                    writeStream.end();
                });
            });
        env:
          CICD_CF_API_TOKEN: ${{ secrets.CICD_CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
      - run: npm ci --include-workspace-root
      - run: npx prettier --write packages/types/src/ai-tools/workers-ai/catalog.ts
      - name: Git Setup
        run: |
          git config user.name "${{ steps.gh_cloudflare_token.outputs.app-slug }}[bot]"
          git config user.email "${{ vars.GH_CLOUDFLARE_USER_ID }}+${{ steps.gh_cloudflare_token.outputs.app-slug }}[bot]@users.noreply.github.com"
      - run: git add packages/types/src/ai-tools/workers-ai/catalog.ts
      - run: git commit -m "Updated workers-ai model catalog" || echo "model catalog not touched"
      - run: git push
