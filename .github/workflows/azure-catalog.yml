name: Azure Ai Catalog

on:
  push:
    paths:
      - '.github/workflows/azure-catalog.yml'
      - 'packages/types/src/ai-tools/azure-catalog.ts'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  azure:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
    steps:
      - uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          disable-sudo: true
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
      - run: npm install --include-workspace-root --omit prod
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { CognitiveServicesManagementClient } = require('@azure/arm-cognitiveservices');
            const { SubscriptionClient } = require('@azure/arm-resources-subscriptions');
            const { ClientSecretCredential } = require('@azure/identity');

            const credential = new ClientSecretCredential(process.env.AZURE_TENANT_ID, process.env.AZURE_CLIENT_ID, process.env.AZURE_CLIENT_SECRET);

            const [pricing, locations, rawServers] = await Promise.all([
              (async () => {
                let url = new URL('api/retail/prices', 'https://prices.azure.com');
                url.searchParams.set('$filter', "productName eq 'Azure OpenAI'");

                const pricing = [];

                while (url) {
                  const response = await fetch(url);
                  if (response.ok) {
                    const { Items, NextPageLink } = await response.json();

                    pricing.push(...Items);

                    if (NextPageLink) {
                      url = new URL(NextPageLink);
                    } else {
                      url = null;
                    }
                  } else {
                    url = null;
                  }
                }

                return pricing;
              })(),
              (async () => {
                const subClient = new SubscriptionClient(credential);
                const locations = [];
                for await (const location of subClient.subscriptions.listLocations(process.env.AZURE_SUB_ID)) {
                  locations.push(location);
                }

                return locations;
              })(),
              (async () => {
                const aiClient = new CognitiveServicesManagementClient(credential, process.env.AZURE_SUB_ID);

                const accounts = [];
                for await (const account of aiClient.accounts.list()) {
                  accounts.push(account);
                }

                return accounts;
              })(),
            ]);

            function parseShorthandNumber(input) {
              const multipliers = Object.freeze({
                k: 1e3,
                m: 1e6,
                b: 1e9,
                t: 1e12,
              });

              const normalized = input.trim().toLowerCase();
              const match = new RegExp(/^([\d.,]+)([kmbt])?$/i).exec(normalized);

              if (!match) {
                throw new Error(`Invalid shorthand number format: "${input}"`);
              }

              const [, numberPart, suffix] = match;
              if (numberPart) {
                const numeric = parseFloat((numberPart ?? '').replace(/,/g, ''));

                if (isNaN(numeric)) {
                  throw new Error(`Invalid numeric part in input: "${input}"`);
                }

                // @ts-expect-error it's fine because regex would fail if it was invalid
                return numeric * (suffix ? multipliers[suffix] : 1);
              } else {
                throw new Error(`Invalid numeric part in input: "${input}"`);
              }
            }
        env:
          AZURE_SUB_ID: ${{ secrets.AZURE_SUB_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      # - run: npx prettier --write packages/types/src/ai-tools/azure-catalog.ts
      # - name: Git Setup
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      # - run: git add packages/types/src/ai-tools/azure-catalog.ts
      # - run: git commit -m "Updated azure inventory" || echo "inventory not touched"
      # - run: git push
